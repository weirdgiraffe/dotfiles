{
  "ap": {
    "prefix": "ap",
    "description": "append(slice, value)",
    "body": "append(${1:slice}, ${0:value})"
  },
  "ap=": {
    "prefix": "ap=",
    "description": "a = append(a, value)",
    "body": "${1:slice} = append($1, ${0:value})"
  },
  "br": {
    "prefix": "br",
    "description": "break",
    "body": "break"
  },
  "ch": {
    "prefix": "ch",
    "description": "chan Type",
    "body": "chan ${0:int}"
  },
  "cn": {
    "prefix": "cn",
    "description": "continue",
    "body": "continue"
  },
  "con": {
    "prefix": "con",
    "description": "const XXX Type = ...",
    "body": "const ${1:NAME} ${2:Type} = ${0:0}"
  },
  "cons": {
    "prefix": "cons",
    "description": "const ( ... )",
    "body": [
      "const (",
      "\t${1:NAME} ${2:Type} = ${3:value}",
      "\t$0",
      ")"
    ]
  },
  "df": {
    "prefix": "df",
    "description": "defer someFunction()",
    "body": [
      "defer ${1:func}($2)",
      "$0"
    ]
  },
  "eq": {
    "prefix": "eq",
    "description": "equals: test two identifiers with DeepEqual",
    "body": [
      "if !reflect.DeepEqual(${1:expected}, ${2:actual}) {",
      "\t_, file, line, _ := runtime.Caller(0)",
      "\tfmt.Printf(\"%s:%d:\\n\\n\\texp: %#v\\n\\n\\tgot: %#v\\n\\n\", filepath.Base(file), line, $1, $2)",
      "\tt.FailNow()",
      "\\}"
    ]
  },
  "errh": {
    "prefix": "errh",
    "description": "Error handle and return",
    "body": [
      "if err != nil {",
      "\t$1",
      "\treturn",
      "\\}",
      "$0"
    ]
  },
  "errl": {
    "prefix": "errl",
    "description": "Error with log.Fatal(err)",
    "body": [
      "if err != nil {",
      "\tlog.Fatal(err)",
      "\\}",
      "$0"
    ]
  },
  "errn": {
    "prefix": "errn",
    "description": "Error return",
    "body": [
      "if err != nil {",
      "\treturn err",
      "\\}",
      "$0"
    ]
  },
  "errn,": {
    "prefix": "errn,",
    "description": "Error return with two return values",
    "body": [
      "if err != nil {",
      "\treturn ${1:nil}, ${2:err}",
      "\\}",
      "$0"
    ]
  },
  "errn,w": {
    "prefix": "errn,w",
    "description": "Error return wrap with two return values",
    "body": [
      "if err != nil {",
      "\treturn nil, fmt.Errorf(\"${1:message}: %w\", err)",
      "\\}",
      "$0"
    ]
  },
  "errn,wf": {
    "prefix": "errn,wf",
    "description": "Error return wrapf with two return values",
    "body": [
      "if err != nil {",
      "\treturn nil, errors.Wrapf(err, \"${1:message %v}\", ${2:args...})",
      "\\}",
      "$0"
    ]
  },
  "errnw": {
    "prefix": "errnw",
    "description": "Error return wrap",
    "body": [
      "if err != nil {",
      "\treturn fmt.Errorf(\"${1:message}: %w\", err)",
      "\\}",
      "$0"
    ]
  },
  "errnwf": {
    "prefix": "errnwf",
    "description": "Error return wrapf",
    "body": [
      "if err != nil {",
      "\treturn errors.Wrapf(err, \"${1:message %v}\", ${2:args...})",
      "\\}",
      "$0"
    ]
  },
  "errp": {
    "prefix": "errp",
    "description": "Error panic",
    "body": [
      "if err != nil {",
      "\tpanic($1)",
      "\\}",
      "$0"
    ]
  },
  "errt": {
    "prefix": "errt",
    "description": "Error test fatal ",
    "body": [
      "if err != nil {",
      "\tt.Fatal(err)",
      "\\}",
      "$0"
    ]
  },
  "ew": {
    "prefix": "ew",
    "description": "errors.Wrap",
    "body": "errors.Wrap(${1:err}, \"${2:message}\")"
  },
  "ewf": {
    "prefix": "ewf",
    "description": "errors.Wrapf",
    "body": "errors.Wrapf(${1:err}, \"${2:message %v}\", ${3:args...})"
  },
  "forsel": {
    "prefix": "forsel",
    "description": "for select",
    "body": [
      "for {",
      "\tselect {",
      "\t\tcase ${2:${1:result} := }<- ${3:channel}:",
      "\t\t\t$0",
      "\t\\}",
      "\\}"
    ]
  },
  "ft": {
    "prefix": "ft",
    "description": "fallthrough",
    "body": "fallthrough"
  },
  "go": {
    "prefix": "go",
    "description": "go someFunc(...)",
    "body": "go ${1:funcName}($0)"
  },
  "hf": {
    "prefix": "hf",
    "description": "http.HandlerFunc",
    "body": [
      "func ${1:handler}(w http.ResponseWriter, r *http.Request) {",
      "\t${0:fmt.Fprintf(w, \"hello world\")}",
      "\\}"
    ]
  },
  "hhf": {
    "prefix": "hhf",
    "description": "mux.HandleFunc",
    "body": [
      "${1:http}.HandleFunc(\"${2:/}\", func(w http.ResponseWriter, r *http.Request) {",
      "\t${0:fmt.Fprintf(w, \"hello world\")}",
      "\\})"
    ]
  },
  "import": {
    "prefix": "import",
    "description": "import ( ... )",
    "body": [
      "import (",
      "\t\"${1:package}\"",
      ")"
    ]
  },
  "interface": {
    "prefix": "interface",
    "description": "interface I { ... }",
    "body": [
      "type ${1:Interface} interface {",
      "\t${2:/* TODO: add methods */}",
      "\\}"
    ]
  },
  "iota": {
    "prefix": "iota",
    "description": "const ( ... = iota )",
    "body": [
      "const (",
      "\t${1:NAME} ${2:Type} = iota",
      "\t$0",
      ")"
    ]
  },
  "json": {
    "prefix": "json",
    "description": "\\`json:key\\`",
    "body": "\\`json:\"${1:`!v  go#util#snippetcase(matchstr(getline(\".\"), '\\w\\+'))`}\"\\`"
  },
  "make": {
    "prefix": "make",
    "description": "make(Type, size)",
    "body": "make(${1:[]string}, ${2:0})$0"
  },
  "map": {
    "prefix": "map",
    "description": "map[Type]Type",
    "body": "map[${1:string}]${0:int}"
  },
  "not implemented": {
    "prefix": "notimpl",
    "description": "Not implemented error",
    "body": "errors.New(\"not impelemented\")"
  },
  "package": {
    "prefix": "package",
    "description": "package ...",
    "body": [
      "// Package $1 provides ${2:...}",
      "package ${1:main}",
      "$0"
    ]
  },
  "pn": {
    "prefix": "pn",
    "description": "panic()",
    "body": "panic(\"${0:msg}\")"
  },
  "selc": {
    "prefix": "selc",
    "description": "select case",
    "body": [
      "case ${1:${2:var} := }<-${3:channel}:",
      "  $0"
    ]
  },
  "select": {
    "prefix": "select",
    "description": "select { case a := <-chan: ... }",
    "body": [
      "select {",
      "case ${1:v1} := <-${2:chan1}:",
      "\t$0",
      "\\}"
    ]
  },
  "sp": {
    "prefix": "sp",
    "description": "fmt.Sprintf(...)",
    "body": "fmt.Sprintf(\"%${1:s}\", ${2:var})"
  },
  "st": {
    "prefix": "st",
    "description": "type T struct { ... }",
    "body": [
      "type ${1:Type} struct {",
      "\t$0",
      "\\}"
    ]
  },
  "switch": {
    "prefix": "switch",
    "description": "switch x { ... }",
    "body": [
      "switch ${1:var} {",
      "case ${2:value1}:",
      "\t$0",
      "\\}"
    ]
  },
  "ter": {
    "prefix": "ter",
    "description": "if err != nil { t.Errorf(...) }",
    "body": [
      "if err != nil {",
      "\tt.Errorf(\"${0:message}\")",
      "\\}"
    ]
  },
  "terf": {
    "prefix": "terf",
    "description": "if err != nil { t.Fatalf(...) }",
    "body": [
      "if err != nil {",
      "\tt.Fatalf(\"${0:message}\")",
      "\\}"
    ]
  },
  "tr": {
    "prefix": "tr",
    "description": "t.Run(XYZ, func(t *testing.T){ ... })",
    "body": [
      "t.Run(\"$0\", func(t *testing.T){",
      "",
      "\\})"
    ]
  },
  "tsrv": {
    "prefix": "tsrv",
    "description": "httptest.NewServer",
    "body": [
      "ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
      "\tfmt.Fprintln(w, ${1:`response`})",
      "\\}))",
      "defer ts.Close()",
      "",
      "${0:someUrl} = ts.URL"
    ]
  },
  "tswitch": {
    "prefix": "tswitch",
    "description": "type switch x { ... }",
    "body": [
      "switch ${2:$1 := }${1:v}.(type) {",
      "\t$0",
      "\\}"
    ]
  },
  "var": {
    "prefix": "var",
    "description": "var x Type [= ...]",
    "body": "var ${1:x} ${2:Type}${3: = ${0:value}}"
  },
  "vars": {
    "prefix": "vars",
    "description": "var ( ... )",
    "body": [
      "var (",
      "\t${1:x} ${2:Type}${3: = ${0:value}}",
      ")"
    ]
  },
  "yaml": {
    "prefix": "yaml",
    "description": "\\`yaml:key\\`",
    "body": "\\`yaml:\"${1:`!v  go#util#snippetcase(matchstr(getline(\".\"), '\\w\\+'))`}\"\\`"
  },
  "test": {
    "prefix": "test",
    "description": "define test function",
    "body": [
      "func Test${1:`name`}(t *testing.T) {",
      "\t$0",
      "}"
    ]
  }
}
